name: Veracode Scan

on:
  push:
    branches:
      - dev
      - main
      - master


env:
  PROJECT: ${{ github.event.repository.name }}
  BUILD_ID: ${{ github.run_id }}

jobs:
  AutoPack:
    name: AutoPack
    runs-on:  ubuntu-24.04

    steps:
      - name: Checkout Código
        uses: actions/checkout@v4
      - name: Detectar Projeto Java-Maven
        id: check_maven
        run: |
          if [ -f "pom.xml" ]; then
            echo "java_maven=true" >> $GITHUB_OUTPUT
          else
            echo "java_maven=false" >> $GITHUB_OUTPUT
          fi

      - name: Detectar versão do Java no pom.xml
        if: ${{ steps.check_maven.outputs.java_maven == 'true' }}
        id: detect_java
        run: |
          # Tenta extrair o valor de <maven.compiler.source> do pom.xml
          JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml || echo "11")
          if [[ "$JAVA_VERSION" == "11" ]]; then
            JAVA_VERSION=$(grep -oPm1 "(?<=<java.version>)[^<]+" pom.xml || echo "11")
          fi
          if [[ "$JAVA_VERSION" == "\${java.version}" ]]; then
            JAVA_VERSION=$(grep -oPm1 "(?<=<java.version>)[^<]+" pom.xml || echo "11")
          fi
          echo "Versão do Java detectada: $JAVA_VERSION"
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Configurar JDK e Maven
        if: ${{ steps.check_maven.outputs.java_maven == 'true' }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.detect_java.outputs.java_version }}
          distribution: 'temurin'
          cache: maven

      - name: Compilar Projeto Maven
        if: ${{ steps.check_maven.outputs.java_maven == 'true' }}
        run: mvn clean package -DskipTests

      - name: Instalar CLI do Veracode e Autopack-Veracode
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}
      
          # Procura por arquivos WAR, JAR ou ZIP na pasta target
          WAR_FILE=$(find target/ -maxdepth 1 -name "*.war" | head -n 1)
          JAR_FILE=$(find target/ -maxdepth 1 -name "*.jar" | head -n 1)
      
          if [ -f "$WAR_FILE" ]; then
            echo "WAR encontrado: $WAR_FILE"
            # Copia o WAR para o diretório de artefatos com um nome fixo
            cp "$WAR_FILE" ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}/application.war
      
          elif [ -f "$JAR_FILE" ]; then
            echo "JAR encontrado: $JAR_FILE"
            cp "$JAR_FILE" ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}/application.jar
            # Compacta o JAR em um zip para padronizar, se necessário
      
          else
            echo "Nenhum WAR, JAR ou ZIP encontrado. Rodando Autopack..."
            curl -fsS https://tools.veracode.com/veracode-cli/install | sh
            ./veracode package --source . --output ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }} --trust
      
            find ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }} -name "*.zip" |
            while read filename; do unzip -o -d "$(dirname "$filename")" "$filename"; done
      
            rm -rf ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}/*.zip
            zip analysisPack.zip -r ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}
            mv analysisPack.zip ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}/analysisPack.zip
          fi

      - name: Publicar Artefato para Análise
        uses: actions/upload-artifact@v4
        with:
          name: analysisPack
          path: |
            ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}/analysisPack.zip
            ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}/application.jar
            ${{ github.workspace }}/artifacts/${{ env.BUILD_ID }}/application.war
            
          retention-days: 1

  # ─── Veracode SCA (com Workspace Map no próprio job) ──────────────────────────
  SCA:
    name: Veracode SCA
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Executar Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL https://download.sourceclear.com/ci.sh \
            | bash -s -- scan --update-advisor --allow-dirty --uri-as-name --recursive


  # ─── Veracode Pipeline Scan (mantém policy remap intacto) ────────────────────

  Scan:
    name: Scan
    runs-on: ubuntu-24.04
    needs: AutoPack
    
    steps:
      # 1) Baixa o artifact com nome 'analysisPack'
      - name: Baixar Artefato para Análise
        uses: actions/download-artifact@v4
        with:
          name: analysisPack
  
      # 2) (Opcional) Listar arquivos baixados para confirmar o que veio
      
  
      # 3) Detectar qual arquivo usar (WAR/JAR ou analysisPack.zip)
      - name: Detectar arquivo de análise
        id: detect_artifact
        run: |
          # Procura pelo arquivo WAR
          WAR_FILE=$(find . -name "*.war" | head -n 1)
          # Procura pelo arquivo JAR (excluindo o pipeline-scan.jar)
          JAR_FILE=$(find . -name "*.jar" -not -name "pipeline-scan.jar" | head -n 1)
  
          if [ -f "$WAR_FILE" ]; then
            echo "WAR encontrado: $WAR_FILE"
            echo "artifact_file=$WAR_FILE" >> $GITHUB_OUTPUT
          elif [ -f "$JAR_FILE" ]; then
            echo "JAR encontrado: $JAR_FILE"
            echo "artifact_file=$JAR_FILE" >> $GITHUB_OUTPUT
          else
            if [ -f "analysisPack.zip" ]; then
              echo "Nenhum WAR/JAR encontrado. Usando analysisPack.zip."
              echo "artifact_file=analysisPack.zip" >> $GITHUB_OUTPUT
            else
              echo "Erro: Nenhum WAR/JAR ou analysisPack.zip"
            fi
          fi

      # 4) Executa o Pipeline Scan usando o arquivo detectado
      - name: Executar Veracode Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.APIID_VERACODE }}
          vkey: ${{ secrets.APIKEY_VERACODE }}
          file: ${{ steps.detect_artifact.outputs.artifact_file }} --issue_details true
          #fail_build: true
          fail_build: false

  SAST:
    runs-on: ubuntu-24.04
    needs: AutoPack
    steps:
      - name: Baixar Artefato para Análise SAST
        uses: actions/download-artifact@v4
        with:
          name: analysisPack

      - name: Baixar Veracode SAST Wrapper
        run: |
          curl -O -L https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/24.7.14.0/vosp-api-wrappers-java-24.7.14.0.jar


      - name: Executar Veracode SAST
        env:
          VID: ${{ secrets.APIID_VERACODE }}
          VKEY: ${{ secrets.APIKEY_VERACODE }}
          PROJECT: ${{ github.event.repository.name }}
          BUILD_ID: ${{ github.run_id }}
          BRANCH: ${{ github.ref_name }}
        run: |
          echo "Branch atual: $BRANCH"
      
          WAR_FILE=$(find . -maxdepth 2 -name "*.war" | head -n 1)
          if [ -f "$WAR_FILE" ]; then
            ARTIFACT="$WAR_FILE"
          else
            JAR_FILE=$(find . -maxdepth 2 -name "*.jar" -not -name "vosp-api-wrappers*.jar" | head -n 1)
            if [ -f "$JAR_FILE" ]; then
              ARTIFACT="$JAR_FILE"
            else
              ARTIFACT="analysisPack.zip"
            fi
          fi
      
          if [ "$BRANCH" = "master" ]; then
            echo "Executando SAST em produção (sem sandbox)..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid "$VID" -vkey "$VKEY" \
              -action uploadandscan \
              -appname "$PROJECT" \
              -version "$BUILD_ID" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox false
          elif [ "$BRANCH" = "develop" ]; then
            echo "Executando SAST com sandbox QA..."
            java -jar vosp-api-wrappers-java-24.7.14.0.jar \
              -vid "$VID" -vkey "$VKEY" \
              -action uploadandscan \
              -appname "$PROJECT" \
              -version "$BUILD_ID" \
              -filepath "$ARTIFACT" \
              -createprofile true \
              -deleteincompletescan 2 \
              -createsandbox true \
              -sandboxname "QA"
          else
            echo "Branch desconhecida: $BRANCH. Abortando."
            exit 1
          fi
